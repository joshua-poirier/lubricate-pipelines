bld ?= bin/${ENV}.env
include $(bld)
export $(shell sed 's/=.*//' $(bld))

GIT_HASH ?= $(shell git log --format="%h" -n 1)
IMAGE_TAG_SHORT = ${DOCKER_USERNAME}/${APP_NAME}:${GIT_HASH}
LATEST_IMAGE_TAG_SHORT = ${DOCKER_USERNAME}/${APP_NAME}:latest
IMAGE_TAG = ${CONTAINER_REGISTRY}/${IMAGE_TAG_SHORT}
LATEST_IMAGE_TAG = ${CONTAINER_REGISTRY}/${LATEST_IMAGE_TAG_SHORT}

.PHONY: init
init:
	pip install pipenv
	pipenv install --dev

.PHONY: lint
lint:
	python -m flake8 .

.PHONY: check_format
check_format: lint
	python -m black . --check

.PHONY: format
format: lint
	python -m isort .
	python -m black .

.PHONY: test
test: lint format
	pipenv run pytest tests

.PHONY: coverage
coverage:
	pipenv run pytest --cov=src tests

.PHONY: build
build:
	docker build --tag ${IMAGE_TAG} .

.PHONY: az_login
az_login:
	AZ_STATUS = $(shell az account show)
	if ${AZ_STATUS} = "Please run 'az login' to setup account."
	then
		echo "Need to login"
		# az login
	fi

.PHONY: acr_login
login: az_login
	az acr login --name ${CONTAINER_REGISTRY}

.PHONY: start
start: az_login
	docker run -p 8080:80 -it ${IMAGE_TAG}

.PHONY: register
register:
	az acr build --registry lubricate${ENV}cr --image ${IMAGE_TAG_SHORT} .

.PHONY: push
push: acr_login
	az acr build --registry lubricate${ENV}cr --image ${IMAGE_TAG_SHORT} .

.PHONY: release
release: acr_login
	docker pull ${IMAGE_TAG}
	docker tag ${IMAGE_TAG} ${LATEST_IMAGE_TAG_SHORT}
	az acr build --registry lubricate${ENV}cr --image ${LATEST_IMAGE_TAG} .

.PHONY: clean
	docker container prune
	docker image prune
